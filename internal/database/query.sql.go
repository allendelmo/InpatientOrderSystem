// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createMedicationOrder = `-- name: CreateMedicationOrder :exec
INSERT INTO medication_orders (
        file_number,
        nurse_name,
        ward,
        bed,
        quantity,
        medication,
        uom,
        request_time,
        nurse_remarks,
        status,
        pharmacy_remarks
    )
VALUES (?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateMedicationOrderParams struct {
	FileNumber      int64
	NurseName       sql.NullString
	Ward            sql.NullString
	Bed             sql.NullString
	Quantity        sql.NullInt64
	Medication      sql.NullString
	Uom             sql.NullString
	RequestTime     time.Time
	NurseRemarks    sql.NullString
	Status          string
	PharmacyRemarks sql.NullString
}

func (q *Queries) CreateMedicationOrder(ctx context.Context, arg CreateMedicationOrderParams) error {
	_, err := q.db.ExecContext(ctx, createMedicationOrder,
		arg.FileNumber,
		arg.NurseName,
		arg.Ward,
		arg.Bed,
		arg.Quantity,
		arg.Medication,
		arg.Uom,
		arg.RequestTime,
		arg.NurseRemarks,
		arg.Status,
		arg.PharmacyRemarks,
	)
	return err
}

const getMedicationOrderList = `-- name: GetMedicationOrderList :many
SELECT order_number, file_number, nurse_name, ward, bed, medication, quantity, uom, request_time, nurse_remarks, status, pharmacy_remarks
FROM medication_orders
WHERE STATUS = 'PENDING'
`

func (q *Queries) GetMedicationOrderList(ctx context.Context) ([]MedicationOrder, error) {
	rows, err := q.db.QueryContext(ctx, getMedicationOrderList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MedicationOrder
	for rows.Next() {
		var i MedicationOrder
		if err := rows.Scan(
			&i.OrderNumber,
			&i.FileNumber,
			&i.NurseName,
			&i.Ward,
			&i.Bed,
			&i.Medication,
			&i.Quantity,
			&i.Uom,
			&i.RequestTime,
			&i.NurseRemarks,
			&i.Status,
			&i.PharmacyRemarks,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReadytoCollect = `-- name: GetReadytoCollect :many
SELECT order_number, file_number, nurse_name, ward, bed, medication, quantity, uom, request_time, nurse_remarks, status, pharmacy_remarks
FROM medication_orders
WHERE STATUS = 'READY TO COLLECT'
`

func (q *Queries) GetReadytoCollect(ctx context.Context) ([]MedicationOrder, error) {
	rows, err := q.db.QueryContext(ctx, getReadytoCollect)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MedicationOrder
	for rows.Next() {
		var i MedicationOrder
		if err := rows.Scan(
			&i.OrderNumber,
			&i.FileNumber,
			&i.NurseName,
			&i.Ward,
			&i.Bed,
			&i.Medication,
			&i.Quantity,
			&i.Uom,
			&i.RequestTime,
			&i.NurseRemarks,
			&i.Status,
			&i.PharmacyRemarks,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMedicationOrder = `-- name: UpdateMedicationOrder :exec
UPDATE medication_orders
SET STATUS = 'READY TO COLLECT'
WHERE ORDER_NUMBER = ?
`

func (q *Queries) UpdateMedicationOrder(ctx context.Context, orderNumber int64) error {
	_, err := q.db.ExecContext(ctx, updateMedicationOrder, orderNumber)
	return err
}
